<?xml version='1.0' encoding='UTF-8' standalone='no'?>

<!DOCTYPE xmlmanual SYSTEM "../panes.dtd">

<!-- Copyright 2021-2022, Stephen Fryatt (info@stevefryatt.org.uk)
   -
   - This file is part of Pane Tutorial:
   -
   -   http://www.stevefryatt.org.uk/software/
   -
   - Licensed under the EUPL, Version 1.2 only (the "Licence");
   - You may not use this work except in compliance with the
   - Licence.
   -
   - You may obtain a copy of the Licence at:
   -
   -   http://joinup.ec.europa.eu/software/page/eupl
   -
   - Unless required by applicable law or agreed to in
   - writing, software distributed under the Licence is
   - distributed on an "AS IS" basis, WITHOUT WARRANTIES
   - OR CONDITIONS OF ANY KIND, either express or implied.
   -
   - See the Licence for the specific language governing
   - permissions and limitations under the Licence.
  -->

<manual xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="xmldoc.xsd" version="1.8.6">

<!-- Chapter 9
   -
   - An Embedded Toolbox
  -->

<chapter id="chap-embed-tool">
<resources>
<images>Chapter09</images>
<downloads>Chapter09</downloads>
</resources>
<filename>an-embedded-toolbox.php</filename>
<uri>an-embedded-toolbox</uri>
<title>An Embedded Toolbox</title>

<summary>For a truly minimalist look, we can embed a toolbox into one of our window&rsquo;s scroll bars.</summary>

<section>
<p>Back in the late 1980s, when RISC&nbsp;OS was a new system, space on the screens of the day was limited and there was a trend for using minimalist toolboxes embedded into the space used by the scrollbars of a window. Of the numerous applications which used the technique, the original Ovation is still well-known &ndash; its take on the idea can be seen in <reference id="fig-embed-tool-ovation" />.</p>

<image id="fig-embed-tool-ovation" file="embed-tool-ovation.png" title="The original Ovation put its toolbar where its scroll bar should have been"/>

<p>At the time, Ovation&rsquo;s author achieved this effect using three windows all interleaved carefully. These days, the effect can be achieved more easily using the Nested Wimp, and in previous chapters we have already seen examples from Paint (<reference id="fig-nest-wimp-paint" />) and NetSurf (<reference id="fig-move-furniture-netsurf" />) in passing.</p>

<p>As with the full-width toolbar that we created in <reference id="chap-move-furniture" />, such toolboxes can be created using Furniture Windows. In this chapter, we will create ourselves a simple embedded toolbox in the bottom scroll bar of our window.</p>
</section>

<section>
<title>Updating the templates</title>

<p>Since we will be losing the toolbar at the top of our window, the first step to creating an embedded toolbox will be to reset our main window template back to the one that we created in <reference id="chap-example-app"/>: this will undo the changes to the work area that we made in <reference id="sect-top-bar-work-area" />. We will also delete the existing Toolbar template, leaving us with just the Main and ProgInfo window definitions as seen in <reference id="fig-embed-tool-clean-templates" />.</p>

<image id="fig-embed-tool-clean-templates" file="embed-tool-clean-templates.png" title="The clean set of templates from the original demo application"/>

<p>The next step is to create ourselves a new window for the embedded toolbox. We&rsquo;ll call this &ldquo;Embedded&rdquo;, and it can be seen being edited by <cite>WinEd</cite> in <reference id="fig-embed-tool-template" />. Since we will be sizing and positioning it to fit into the scroll bar of our main window, there is no point adjusting its dimensions for now. The title has been set to &ldquo;Toolbox&rdquo;, but it doesn&rsquo;t matter as it won&rsquo;t be seen.</p>

<image id="fig-embed-tool-template" file="embed-tool-template.png" title="The new window template for the embedded toolbox"/>

<p>The window flags need to be set in a similar manner to our previous toolbars: turn off all of the window furniture (title bar, scroll bars and so on), and turn on the furniture flag. The settings in <cite>WinEd</cite> can be seen in <reference id="fig-embed-tool-flags" />.</p>

<image id="fig-embed-tool-flags" file="embed-tool-flags.png" title="Setting the window flags for the embedded toolbox"/>

<p>With these changes in place, we can now close the templates and move on to updating the program itself. We&rsquo;ll need to update <function>PROCinitialise</function> in order to load the new &ldquo;Embedded&rdquo; template instead of the &ldquo;Toolbar&rdquo; that we had before &ndash; this is simply a change to the name passed to <function>PROCtemplate_load()</function>.</p>

<code lang="bbcbasic">PROCtemplate_load(&quot;Embedded&quot;, b%, buffer_size%, -1)
SYS &quot;Wimp_CreateWindow&quot;,,b% TO ToolBoxWindow%</code>

<p>We can also simplify the <name>Open_Window_Request</name> event handler in <function>PROCpoll</function> again. We will no longer need to make any adjustments to the contents of the toolbox, so we can delete <function>PROCopen_window_request()</function> completely and just call <swi>Wimp_OpenWindow</swi> in the <keyword>CASE</keyword> statement once again.</p>

<code lang="bbcbasic">CASE reason% OF
  WHEN 2      : SYS &quot;Wimp_OpenWindow&quot;,,b%
  WHEN 3      : SYS &quot;Wimp_CloseWindow&quot;,,b%
  WHEN 6      : PROCmouse_click(b%)
  WHEN 9      : PROCmenu_selection(b%)
  WHEN 17, 18 : IF b%!16 = 0 THEN Quit% = TRUE
ENDCASE</code>
</section>

<section>
<title>Positioning the furniture</title>

<p>The remaining changes that we need to make reside in <function>PROCopen_main_window</function>, and concern the positioning of the embedded toolbox. As we <reference id="sect-move-furniture-full-width">saw in the previous chapter</reference>, making child windows behave as part of their parent&rsquo;s furniture is simply a case of positioning them appropriately. To embed our toolbox into the horizontal scroll bar, we place it over the bar and leave the Nested Wimp to do the rest.</p>

<p>The process for laying the toolbox out starts out very similar to that used in the previous chapter, although we have changed the name of the <variable>toolbar%</variable> variable to <variable>toolbox%</variable>, so as to reflect the different type of pane that we&rsquo;re positioning.</p>

<code lang="bbcbasic">main% = q%
toolbox% = q% + 100
main_outline% = q% + 200</code>

<p>We will also amend the call to <swi>Wimp_GetWindowInfo</swi> in the same way.</p>

<code lang="bbcbasic">!toolbox% = ToolBoxWindow%
SYS &quot;Wimp_GetWindowInfo&quot;,,toolbox% OR %1</code>

<p>Working out the horizontal position of the new toolbox should be a familiar process. We will be anchoring it to the left hand side of the main window&rsquo;s work area, as shown in <reference id="fig-embed-tool-anchor-x"/>.</p>

<image id="fig-embed-tool-anchor-x" file="embed-tool-anchor-x.png" title="Horizontally anchoring the toolbar to the parent&rsquo;s scroll bar"/>

<p>As we currently have nothing to go into the toolbox, the width is largely immaterial and so for now we will set it to 200 OS&nbsp;Units.</p>

<code lang="bbcbasic">box_width% = 200</code>

<p>Horizontally, the toolbox should align with the left-hand edge of the main window&rsquo;s work area, which we achieve in the usual way. The <maths>X0</maths> extent remains relative to the visible area of the main window, but the <maths>X1</maths> extent is offset from the main window&rsquo;s <maths>X0</maths> extent by the calculated width.</p>

<code lang="bbcbasic">toolbox%!4 = main%!4                : REM Visible Area X0
toolbox%!12 = main%!4 + box_width%  : REM Visible Area X1</code>

<p>Positioning the toolbar in the vertical dimension, however, is more tricky than anything which we have encountered up to now. As can be seen in <reference id="fig-embed-tool-anchor-y"/>, we need to ensure that the top and bottom outlines of the toolbox line up with the top and bottom outlines of the main window&rsquo;s horizontal scroll bar.</p>

<image id="fig-embed-tool-anchor-y" file="embed-tool-anchor-y.png" title="Vertically anchoring the toolbar to the parent&rsquo;s scroll bar"/>

<p>The <maths>Y0</maths> coordinate for the toolbox visible area must line up with the <maths>Y0</maths> coordinate of the main window&rsquo;s outline. As we saw in <reference id="sect-move-furniture-details">the previous chapter</reference>, the outline includes the window border, and so its <maths>X0</maths> is one pixel further down the screen than the <maths>X0</maths> of the visible area will be.</p>

<p>However, unlike last time, we can no longer rely on the Wimp clipping the visible area of the toolbox for us. If we look at the <maths>Y1</maths> coordinate of the toolbox visible area, we can see that it must be aligned to the <maths>Y0</maths> coordinate of the main window&rsquo;s visible area. The <maths>Y1</maths> is exclusive, while the <maths>Y0</maths> is inclusive, so we&rsquo;re actually aligning the border of the toolbox with the bottom pixel of the main window&rsquo;s visible area &ndash; again, we&rsquo;re a pixel adrift!</p>

<p>From this, we can see that the height of the toolbox visible area will be</p>

<code lang="bbcbasic">box_height% = (main%!8 - pixel_height%) - (main_outline%!8 + pixel_height%)</code>

<p>where <variable>pixel_height%</variable> is a variable holding the number of OS&nbsp;Units which represent the height of a pixel in the current screen mode. This will vary between modes, but as we saw <reference id="list-example-app-mode-var">when we created our simple application</reference>, we can read the information in the form of the vertical eigenfactor and then convert that in to OS&nbsp;Units by raising 2 to its power.</p>

<code lang="bbcbasic">SYS &quot;OS_ReadModeVariable&quot;, -1, 5 TO ,,eigenfactor%
pixel_height% = 2 ^ eigenfactor%</code>

<p>With the toolbar positioned, the final thing to do before opening it as a child window is to use <swi>Wimp_SetExtent</swi> to ensure that the extent is sufficient to cover the whole visible area.</p>

<code lang="bbcbasic">toolbox%!52 = toolbox%!44 + box_width%
toolbox%!48 = toolbox%!56 - box_height%
SYS &quot;Wimp_SetExtent&quot;, ToolBoxWindow%, toolbox% + 44</code>

<p>The toolbar is anchored a little differently to what we have seen before, as it is connected to the left and <em>bottom</em> of the main window&rsquo;s work area. This results in us using flags of &amp;05550000.</p>

<code lang="bbcbasic">toolbox%!28 = -1

SYS &quot;Wimp_OpenWindow&quot;,,toolbox%, &amp;4B534154, !main%, &amp;05550000</code>

<p>Bringing all of these changes together results in <function>PROCopen_main_window</function> looking as shown in <reference id="list-embed-tool-open"/>.</p>

<code id="list-embed-tool-open" lang="bbcbasic" title="Opening the embedded toolbar">DEF PROCopen_main_window
LOCAL screen_width%, screen_height%, window_width%, window_height%, main%, main_outline%
LOCAL toolbox%, box_width%, box_height%, eigenfactor%, pixel_height%

REM Set up the memory blocks.

main% = q%
toolbox% = q% + 100
main_outline% = q% + 200

REM Get the main window details.

!main% = MainWindow%
SYS &quot;Wimp_GetWindowInfo&quot;,,main% OR %1

REM If the window isn't open, resize and centre it on the screen.

IF (main%!32 AND &amp;10000) = 0 THEN
  window_width% = WindowWidth%
  window_height% = WindowHeight%

  REM Read the screen dimensions.

  screen_width% = FNread_mode_dimension(11, 4)
  screen_height% = FNread_mode_dimension(12, 5)

  REM Ensure that the window fills no more than 75% of either dimension.

  IF window_width% &gt; (screen_width% * 0.75) THEN window_width% = screen_width% * 0.75
  IF window_height% &gt; (screen_height% * 0.75) THEN window_height% = screen_height% * 0.75

  REM Update the window dimensions.

  main%!4 = (screen_width% - window_width%) / 2   : REM Visible Area X0
  main%!8 = (screen_height% - window_height%) / 2 : REM Visible Area Y0

  main%!12 = main%!4 + window_width%              : REM Visible Area X1
  main%!16 = main%!8 + window_height%             : REM Visible Area Y1

  REM Reset the scroll offsets.

  main%!20 = 0                                    : REM X Scroll Offset
  main%!24 = 0                                    : REM Y Scroll Offset
ENDIF

REM Open the window at the top of the window stack.

main%!28 = -1 : REM Window to open behind (-1 is top of stack)

SYS &quot;Wimp_OpenWindow&quot;,,main%, &amp;4B534154, -1, &amp;0

REM Get the outline of the main window.

!main_outline% = MainWindow%
SYS &quot;Wimp_GetWindowOutline&quot;,,main_outline%

REM Get the toolbox details

!toolbox% = ToolBoxWindow%
SYS &quot;Wimp_GetWindowInfo&quot;,,toolbox% OR %1

REM Find the height of the toolbox pane's visible area.

SYS &quot;OS_ReadModeVariable&quot;, -1, 5 TO ,,eigenfactor%
pixel_height% = 2 ^ eigenfactor%

box_height% = (main%!8 - pixel_height%) - (main_outline%!8 + pixel_height%)
box_width% = 200

REM Move the toolbox pane so that it's in the correct X and Y position
REM relative to where the main window is to go.

toolbox%!4 = main%!4                              : REM Visible Area X0
toolbox%!8 = main_outline%!8 + pixel_height%      : REM Visible Area Y0
toolbox%!12 = main%!4 + box_width%                : REM Visible Area X1
toolbox%!16 = toolbox%!8 + box_height%            : REM Visible Area Y1

REM Update the toolbox extent to suit the main window furniture.

toolbox%!52 = toolbox%!44 + box_width%
toolbox%!48 = toolbox%!56 - box_height%
SYS &quot;Wimp_SetExtent&quot;, ToolBoxWindow%, toolbox% + 44

REM Open the toolbox pane at the top of the stack, nested into the main window.

toolbox%!28 = -1

SYS &quot;Wimp_OpenWindow&quot;,,toolbox%, &amp;4B534154, !main%, &amp;05550000
ENDPROC</code>

<p>Running the application will produce a window with a toolbar embedded into the horizontal scroll bar, as seen in <reference id="fig-embed-tool-no-icons"/>.</p>

<image id="fig-embed-tool-no-icons" file="embed-tool-no-icons.png" title="An empty toolbar is embedded into the horizontal scroll bar"/>

<p>The application as it stands so far can be found in <reference id="dl-embed-tool-no-icons"/>.</p>

<download id="dl-embed-tool-no-icons" file="Embedded1" title="An empty embedded toolbar." compatibility="armv7"/>


</section>
</chapter>
</manual>
