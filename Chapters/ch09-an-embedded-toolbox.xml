<?xml version='1.0' encoding='UTF-8' standalone='no'?>

<!DOCTYPE xmlmanual SYSTEM "../panes.dtd">

<!-- Copyright 2021-2023, Stephen Fryatt (info@stevefryatt.org.uk)
   -
   - This file is part of Pane Tutorial:
   -
   -   http://www.stevefryatt.org.uk/software/
   -
   - Licensed under the EUPL, Version 1.2 only (the "Licence");
   - You may not use this work except in compliance with the
   - Licence.
   -
   - You may obtain a copy of the Licence at:
   -
   -   http://joinup.ec.europa.eu/software/page/eupl
   -
   - Unless required by applicable law or agreed to in
   - writing, software distributed under the Licence is
   - distributed on an "AS IS" basis, WITHOUT WARRANTIES
   - OR CONDITIONS OF ANY KIND, either express or implied.
   -
   - See the Licence for the specific language governing
   - permissions and limitations under the Licence.
  -->

<manual xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="xmldoc.xsd" version="1.8.6">

<!-- Chapter 9
   -
   - An Embedded Toolbox
  -->

<chapter id="chap-embed-tool">
<resources>
<images>Chapter09</images>
<downloads>Chapter09</downloads>
</resources>
<filename>an-embedded-toolbox.php</filename>
<uri>an-embedded-toolbox</uri>
<title>An Embedded Toolbox</title>

<summary>For a truly minimalist look, we can embed a toolbox into one of our window&rsquo;s scroll bars.</summary>

<section>
<p>Back in the late 1980s, when RISC&nbsp;OS was a new system, space on the screens of the day was limited and there was a trend for using minimalist toolboxes embedded into the space used by the scrollbars of a window. Of the numerous applications which used the technique, the original Ovation is still well-known &ndash; its take on the idea can be seen in <reference id="fig-embed-tool-ovation" />.</p>

<image id="fig-embed-tool-ovation" file="embed-tool-ovation.png" title="The original Ovation put its toolbox where its scroll bar should have been"/>

<p>At the time, Ovation&rsquo;s author created this effect using three windows, which are all interleaved carefully. These days, the effect can be achieved more easily using the Nested Wimp, and in previous chapters we have already seen examples from Paint (<reference id="fig-nest-wimp-paint" />) and NetSurf (<reference id="fig-move-furniture-netsurf" />) in passing.</p>

<p>As with the full-width toolbar that we created in <reference id="chap-move-furniture" />, such toolboxes can be created using Furniture Windows. In this chapter, we will create ourselves a simple embedded toolbox in the bottom scroll bar of our window.</p>
</section>

<section>
<title>Updating the templates</title>

<p>Since we will be losing the toolbar at the top of our window, the first step to creating an embedded toolbox will be to reset our main window template back to the one that we created in <reference id="chap-example-app"/>: this will undo the changes to the work area that we made in <reference id="sect-top-bar-work-area" />. We will also delete the existing Toolbar template, leaving us with just the Main and ProgInfo window definitions as seen in <reference id="fig-embed-tool-clean-templates" />.</p>

<image id="fig-embed-tool-clean-templates" file="embed-tool-clean-templates.png" title="The clean set of templates from the original demo application"/>

<p>The next step is to create ourselves a new window for the embedded toolbox. We&rsquo;ll call this &ldquo;Embedded&rdquo;, and it can be seen being edited by <cite>WinEd</cite> in <reference id="fig-embed-tool-template" />. Since we will be sizing and positioning it to fit into the scroll bar of our main window, there is no point adjusting its dimensions for now. The title has been set to &ldquo;Toolbox&rdquo;, but it doesn&rsquo;t matter as it won&rsquo;t be seen.</p>

<image id="fig-embed-tool-template" file="embed-tool-template.png" title="The new window template for the embedded toolbox"/>

<p>The window flags need to be set in a similar manner to our previous toolbars: turn off all of the window furniture (title bar, scroll bars and so on), and turn on the furniture flag. The settings in <cite>WinEd</cite> can be seen in <reference id="fig-embed-tool-flags" />.</p>

<image id="fig-embed-tool-flags" file="embed-tool-flags.png" title="Setting the window flags for the embedded toolbox"/>

<p>With these changes in place, we can now close the templates and move on to updating the program itself. We&rsquo;ll need to update <function>PROCinitialise</function> in order to load the new &ldquo;Embedded&rdquo; template instead of the &ldquo;Toolbar&rdquo; that we had before &ndash; this is simply a change to the name passed to <function>PROCtemplate_load()</function>.</p>

<code lang="bbcbasic">PROCtemplate_load(&quot;Embedded&quot;, b%, buffer_size%, -1)
SYS &quot;Wimp_CreateWindow&quot;,,b% TO ToolBoxWindow%</code>

<p>We can also simplify the <name>Open_Window_Request</name> event handler in <function>PROCpoll</function> again. We will no longer need to make any adjustments to the contents of the toolbox, so we can delete <function>PROCopen_window_request()</function> completely and just call <swi>Wimp_OpenWindow</swi> in the <keyword>CASE</keyword> statement once again.</p>

<code lang="bbcbasic">CASE reason% OF
  WHEN 2      : SYS &quot;Wimp_OpenWindow&quot;,,b%
  WHEN 3      : SYS &quot;Wimp_CloseWindow&quot;,,b%
  WHEN 6      : PROCmouse_click(b%)
  WHEN 9      : PROCmenu_selection(b%)
  WHEN 17, 18 : IF b%!16 = 0 THEN Quit% = TRUE
ENDCASE</code>
</section>

<section>
<title>Positioning the furniture</title>

<p>The remaining changes that we need to make reside in <function>PROCopen_main_window</function>, and concern the positioning of the embedded toolbox. As we <reference id="sect-move-furniture-full-width">saw in the previous chapter</reference>, making child windows behave as part of their parent&rsquo;s furniture is simply a case of positioning them appropriately. To embed our toolbox into the horizontal scroll bar, we place it over the bar and leave the Nested Wimp to do the rest.</p>

<p>The process for laying the toolbox out starts out very similar to that used in the previous chapter, although we have changed the name of the <variable>toolbar%</variable> variable to <variable>toolbox%</variable>, so as to reflect the different type of pane that we&rsquo;re positioning.</p>

<code lang="bbcbasic">main% = q%
toolbox% = q% + 100
main_outline% = q% + 200</code>

<p>We will also amend the call to <swi>Wimp_GetWindowInfo</swi> in the same way.</p>

<code lang="bbcbasic">!toolbox% = ToolBoxWindow%
SYS &quot;Wimp_GetWindowInfo&quot;,,toolbox% OR %1</code>

<p>Working out the horizontal position of the new toolbox should be a familiar process. We will be anchoring it to the left hand side of the main window&rsquo;s work area, as shown in <reference id="fig-embed-tool-anchor-x"/>.</p>

<image id="fig-embed-tool-anchor-x" file="embed-tool-anchor-x.png" title="Horizontally anchoring the toolbox to the parent&rsquo;s scroll bar"/>

<p>As we currently have nothing to go into the toolbox, the width is largely immaterial and so for now we will set it to 200 OS&nbsp;Units.</p>

<code lang="bbcbasic">box_width% = 200</code>

<p>Horizontally, the toolbox should align with the left-hand edge of the main window&rsquo;s work area, which we achieve in the usual way. The <maths>X0</maths> extent remains relative to the visible area of the main window, but the <maths>X1</maths> extent is offset from the main window&rsquo;s <maths>X0</maths> extent by the calculated width.</p>

<code lang="bbcbasic">toolbox%!4 = main%!4                : REM Visible Area X0
toolbox%!12 = main%!4 + box_width%  : REM Visible Area X1</code>

<p>Positioning the toolbox in the vertical dimension, however, is more tricky than anything which we have encountered up to now. As can be seen in <reference id="fig-embed-tool-anchor-y"/>, we need to ensure that the top and bottom outlines of the toolbox line up with the top and bottom outlines of the main window&rsquo;s horizontal scroll bar.</p>

<image id="fig-embed-tool-anchor-y" file="embed-tool-anchor-y.png" title="Vertically anchoring the toolbox to the parent&rsquo;s scroll bar"/>

<p>The <maths>Y0</maths> coordinate for the toolbox visible area must line up with the <maths>Y0</maths> coordinate of the main window&rsquo;s outline. As we saw in <reference id="sect-move-furniture-details">the previous chapter</reference>, the outline includes the window border, and so its <maths>X0</maths> is one pixel further down the screen than the <maths>X0</maths> of the visible area will be.</p>

<p>However, unlike last time, we can no longer rely on the Wimp clipping the visible area of the toolbox for us. If we look at the <maths>Y1</maths> coordinate of the toolbox visible area, we can see that it must be aligned to the <maths>Y0</maths> coordinate of the main window&rsquo;s visible area. The <maths>Y1</maths> is exclusive, while the <maths>Y0</maths> is inclusive, so we&rsquo;re actually aligning the border of the toolbox with the bottom pixel of the main window&rsquo;s visible area &ndash; again, we&rsquo;re a pixel adrift!</p>

<p>From this, we can see that the height of the toolbox visible area will be</p>

<code lang="bbcbasic">box_height% = (main%!8 - pixel_height%) - (main_outline%!8 + pixel_height%)</code>

<p>where <variable>pixel_height%</variable> is a variable holding the number of OS&nbsp;Units which represent the height of a pixel in the current screen mode. This will vary between modes, but as we saw <reference id="list-example-app-mode-var">when we created our simple application</reference>, we can read the information in the form of the vertical eigenfactor and then convert that in to OS&nbsp;Units by raising 2 to its power.</p>

<code lang="bbcbasic">SYS &quot;OS_ReadModeVariable&quot;, -1, 5 TO ,,eigenfactor%
pixel_height% = 2 ^ eigenfactor%</code>

<p>With the toolbox positioned, the final thing to do before opening it as a child window is to use <swi>Wimp_SetExtent</swi> to ensure that the extent is sufficient to cover the whole visible area.</p>

<code lang="bbcbasic">toolbox%!52 = toolbox%!44 + box_width%
toolbox%!48 = toolbox%!56 - box_height%
SYS &quot;Wimp_SetExtent&quot;, ToolBoxWindow%, toolbox% + 44</code>

<p>For reasons which will become apparent a little later, we will split this code out into a separate procedure called <function>PROCarrange_toolbox()</function>, which is shown in <reference id="list-embed-tool-arrange1"/>.</p>

<code id="list-embed-tool-arrange1" lang="bbcbasic" title="Arranging the embedded toolbox">DEF PROCarrange_toolbox(main%, main_outline%, toolbox%)
LOCAL box_width%, box_height%, eigenfactor%, pixel_width%, pixel_height%, icon_height%, icon_width%, icon%

REM Get the outline of the main window.

!main_outline% = MainWindow%
SYS &quot;Wimp_GetWindowOutline&quot;,,main_outline%

REM Get the toolbox details

!toolbox% = ToolBoxWindow%
SYS &quot;Wimp_GetWindowInfo&quot;,,toolbox% OR %1

REM Find the height of the toolbox pane's visible area.

SYS &quot;OS_ReadModeVariable&quot;, -1, 5 TO ,,eigenfactor%
pixel_height% = 2 ^ eigenfactor%

box_height% = (main%!8 - pixel_height%) - (main_outline%!8 + pixel_height%)
box_width% = 200

REM Move the toolbox pane so that it's in the correct X and Y position
REM relative to where the main window is to go.

toolbox%!4 = main%!4                              : REM Visible Area X0
toolbox%!8 = main_outline%!8 + pixel_height%      : REM Visible Area Y0
toolbox%!12 = main%!4 + box_width%                : REM Visible Area X1
toolbox%!16 = toolbox%!8 + box_height%            : REM Visible Area Y1

REM Update the toolbox extent to suit the main window furniture.

toolbox%!52 = toolbox%!44 + box_width%
toolbox%!48 = toolbox%!56 - box_height%
SYS &quot;Wimp_SetExtent&quot;, ToolBoxWindow%, toolbox% + 44
ENDPROC</code>

<p>This can be called from <function>PROCopen_main_window</function>, in between opening the main window itself and opening the toolbox as a child. The toolbox is anchored a little differently to what we have seen before, as it is connected to the left and <em>bottom</em> of the main window&rsquo;s work area. This results in us using flags of &amp;05550000.</p>

<code lang="bbcbasic">toolbox%!28 = -1

SYS &quot;Wimp_OpenWindow&quot;,,toolbox%, &amp;4B534154, !main%, &amp;05550000</code>

<p>With these changes included, <function>PROCopen_main_window</function> should now look as shown in <reference id="list-embed-tool-open"/>.</p>

<code id="list-embed-tool-open" lang="bbcbasic" title="Opening the embedded toolbox">DEF PROCopen_main_window
LOCAL screen_width%, screen_height%, window_width%, window_height%, main%, main_outline%
LOCAL toolbox%, box_width%, box_height%, eigenfactor%, pixel_height%

REM Set up the memory blocks.

main% = q%
toolbox% = q% + 100
main_outline% = q% + 200

REM Get the main window details.

!main% = MainWindow%
SYS &quot;Wimp_GetWindowInfo&quot;,,main% OR %1

REM If the window isn't open, resize and centre it on the screen.

IF (main%!32 AND &amp;10000) = 0 THEN
  window_width% = WindowWidth%
  window_height% = WindowHeight%

  REM Read the screen dimensions.

  screen_width% = FNread_mode_dimension(11, 4)
  screen_height% = FNread_mode_dimension(12, 5)

  REM Ensure that the window fills no more than 75% of either dimension.

  IF window_width% &gt; (screen_width% * 0.75) THEN window_width% = screen_width% * 0.75
  IF window_height% &gt; (screen_height% * 0.75) THEN window_height% = screen_height% * 0.75

  REM Update the window dimensions.

  main%!4 = (screen_width% - window_width%) / 2   : REM Visible Area X0
  main%!8 = (screen_height% - window_height%) / 2 : REM Visible Area Y0

  main%!12 = main%!4 + window_width%              : REM Visible Area X1
  main%!16 = main%!8 + window_height%             : REM Visible Area Y1

  REM Reset the scroll offsets.

  main%!20 = 0                                    : REM X Scroll Offset
  main%!24 = 0                                    : REM Y Scroll Offset
ENDIF

REM Open the window at the top of the window stack.

main%!28 = -1 : REM Window to open behind (-1 is top of stack)

SYS &quot;Wimp_OpenWindow&quot;,,main%, &amp;4B534154, -1, &amp;0

REM Position the toolbox.

PROCarrange_toolbox(main%, main_outline%, toolbox%)

REM Open the toolbox pane at the top of the stack, nested into the main window.

toolbox%!28 = -1

SYS &quot;Wimp_OpenWindow&quot;,,toolbox%, &amp;4B534154, !main%, &amp;05550000
ENDPROC</code>

<p>Running the application will produce a window with a toolbox embedded into the horizontal scroll bar, as seen in <reference id="fig-embed-tool-no-icons"/>.</p>

<image id="fig-embed-tool-no-icons" file="embed-tool-no-icons.png" title="An empty toolbox is embedded into the horizontal scroll bar"/>

<p>The application as it stands so far can be found in <reference id="dl-embed-tool-no-icons"/>.</p>

<download id="dl-embed-tool-no-icons" file="Embedded1" title="An empty embedded toolbox." compatibility="armv7"/>
</section>


<section>
<title>Adding some icons</title>

<p>A toolbox isn&rsquo;t much use without some icons in it, so the next thing that we will need to do is add some. Unlike all of our previous panes, however, the critical dimension &ndash; the height of the toolbox window, which will determine the size of the icons within it &ndash; is dependent on a factor outside of our control. It is defined by the height of the horizontal scroll bar, which in turn will depend on the desktop theme and mode that user has selected.</p>

<p>As a result, we will need to arrange the icons in the toolbox as we align it to the main window. This isn&rsquo;t a problem: we&rsquo;ve already seen how to move icons around using <swi>Wimp_ResizeIcon</swi> in several of the previous examples &ndash; it just adds another step to the process of opening the window.</p>

<p>The first thing that we will do is to add four icons to the &ldquo;Embedded&rdquo; window template. Since we will be adjusting their size and position when the window is opened, it doesn&rsquo;t matter where they go in the template: for ease of editing, we&rsquo;ve done it as seen in <reference id="fig-embed-tool-template-icons" />. Keeping them in numerical order by their handles, from 0 on the left to 3 on the right, will make working on the design a lot easier!</p>

<image id="fig-embed-tool-template-icons" file="embed-tool-template-icons.png" title="Adding some icon definitions to the toolbox template"/>

<p>Given that space is limited, we will lay the toolbox out with the minimum of wasted real estate as shown in <reference id="fig-embed-tool-layout-square"/>: a border of one pixel around the outside of the icons, and one pixel between each icon. Usually icons are placed on a 4 by 4 OS&nbsp;Unit grid to ensure that designs will work in all modes including the old rectangular pixel ones found on early systems (see the <cite>Style Guide</cite> for details), but we&rsquo;re reading the mode details when we arrange the toolbox and so only need to match the capability of the current screen mode.</p>

<image id="fig-embed-tool-layout-square" file="embed-tool-layout-square.png" title="The intended layout of the toolbox icons"/>

<p>As before, we start by reading the vertical size of a pixel in OS&nbsp;Units, and use that to calculate the height of both the visible area and work area of the toolbox &ndash; the value, also in OS&nbsp;Units, is stored in the <variable>box_height%</variable> variable. Once we have this, we can use it to calculate the height of an icon: the height of the toolbox, less a pixel above and a pixel below. The value is stored in the <variable>icon_height%</variable> variable.</p>

<code lang="bbcbasic">SYS &quot;OS_ReadModeVariable&quot;, -1, 5 TO ,,eigenfactor%
pixel_height% = 2 ^ eigenfactor%

box_height% = (main%!8 - pixel_height%) - (main_outline%!8 + pixel_height%)
icon_height% = box_height% - 2 * pixel_height%</code>

<p>With the vertical layout sorted out, we can move on to the horizontal. Again, we use <swi>OS_ReadModeVariable</swi> to read the width of a pixel in OS&nbsp;Units, then use this to establish the width of each icon. We want them to be square, or as close to square as we can get, but in case we&rsquo;re in a rectangular pixel mode we take the height of the icon in OS&nbsp;Units and round it to a multiple of the pixel width.</p>

<code lang="bbcbasic">SYS &quot;OS_ReadModeVariable&quot;, -1, 4 TO ,,eigenfactor%
pixel_width% = 2 ^ eigenfactor%

icon_width% = (icon_height% + (pixel_width% - 1)) AND (NOT pixel_width%)</code>

<p>If we look at the layout of the icons in <reference id="fig-embed-tool-layout-rect"/>, taken in Mode&nbsp;15 where pixels are taller than they are wide, we can see why this step is necessary.</p>

<image id="fig-embed-tool-layout-rect" file="embed-tool-layout-rect.png" title="The layout of the icons can also handle modes with rectanguar pixels"/>

<p>The final step is to work out the width of the toolbox. In the example above we just set this to 200&nbsp;OS&nbsp;Units, but now we need to calculate the space required to hold all of the icons. The number of icons in the template was returned by <swi>Wimp_GetWindowInfo</swi>, at offset 88 into the block pointed to by <variable>toolbox%</variable>. We can multiply this by the sum of the icon width and the width of the single pixel space between them, then add on an extra pixel for the end of the row.</p>

<code lang="bbcbasic">box_width% = toolbox%!88 * (icon_width% + pixel_width%) + pixel_width%</code>

<p>Armed with all of these dimensions, we can lay the visble area of the toolbox out as before. Once that is done, we must step through each icon in turn and update its pisition using <swi>Wimp_ResizeIcon</swi>.</p>

<code lang="bbcbasic">FOR icon% = 0 TO toolbox%!88 - 1
  xpos% = toolbox%!44 + icon% * (icon_width% + pixel_width%) + pixel_width%
  SYS &quot;Wimp_ResizeIcon&quot;, ToolBoxWindow%, icon%, xpos%, toolbox%!48 + pixel_height%, xpos% + icon_width%, toolbox%!56 - pixel_height%
NEXT icon%</code>

<p>Again we use the number of icons returned by <swi>Wimp_GetWindowInfo</swi>, so that the code will handle changes to the templates without fuss. For each icon, <variable>xpos%</variable> is set to the <maths>X0</maths> coordinate by adding the minumum work area coordinate from <code>toolbox%!44</code> to a suitable offset. This is the same calculation that was used to set the size of the window, because each icon will be placed on what would have been the <maths>X1</maths> extent of the work area of a window with one fewer icons in it.</p>

<p>The coordinates passed to <swi>Wimp_ResizeIcon</swi> are <variable>xpos%</variable> and <variable>xpos%</variable> plus the icon width in the horizontal direction, along with the <maths>Y0</maths> and <maths>Y1</maths> extents of the work area inset by a single pixel.</p>

<p>With these changes added to the code, <function>PROCarrange_toolbox()</function> should now look as seen in <reference id="list-embed-tool-arrange2"/>.</p>

<code id="list-embed-tool-arrange2" lang="bbcbasic" title="Positioning the icons in the toolbox">DEF PROCarrange_toolbox(main%, main_outline%, toolbox%)
LOCAL box_width%, box_height%, eigenfactor%, pixel_width%, pixel_height%, icon_height%, icon_width%, icon%

REM Get the outline of the main window.

!main_outline% = MainWindow%
SYS &quot;Wimp_GetWindowOutline&quot;,,main_outline%

REM Get the toolbox details

!toolbox% = ToolBoxWindow%
SYS &quot;Wimp_GetWindowInfo&quot;,,toolbox% OR %1

REM Find the height of the toolbox pane's visible area.

SYS &quot;OS_ReadModeVariable&quot;, -1, 5 TO ,,eigenfactor%
pixel_height% = 2 ^ eigenfactor%

box_height% = (main%!8 - pixel_height%) - (main_outline%!8 + pixel_height%)
icon_height% = box_height% - 2 * pixel_height%

SYS &quot;OS_ReadModeVariable&quot;, -1, 4 TO ,,eigenfactor%
pixel_width% = 2 ^ eigenfactor%

icon_width% = (icon_height% + (pixel_width% - 1)) AND (NOT pixel_width%)
box_width% = toolbox%!88 * (icon_width% + pixel_width%) + pixel_width%

REM Move the toolbox pane so that it's in the correct X and Y position
REM relative to where the main window is to go.

toolbox%!4 = main%!4                          : REM Visible Area X0
toolbox%!8 = main_outline%!8 + pixel_height%  : REM Visible Area Y0
toolbox%!12 = main%!4 + box_width%            : REM Visible Area X1
toolbox%!16 = toolbox%!8 + box_height%        : REM Visible Area Y1

REM Update the toolbox extent to suit the main window furniture.

toolbox%!52 = toolbox%!44 + box_width%
toolbox%!48 = toolbox%!56 - box_height%
SYS &quot;Wimp_SetExtent&quot;, ToolBoxWindow%, toolbox% + 44

REM Adjust the icon positions to suit the toolbox extent.

FOR icon% = 0 TO toolbox%!88 - 1
	xpos% = toolbox%!44 + icon% * (icon_width% + pixel_width%) + pixel_width%
	SYS &quot;Wimp_ResizeIcon&quot;, ToolBoxWindow%, icon%, xpos%, toolbox%!48 + pixel_height%, xpos% + icon_width%, toolbox%!56 - pixel_height%
NEXT icon%
ENDPROC</code>

<p>When the code is run, the window should now look something like the one in <reference id="fig-embed-tool-complete" />.</p>

<image id="fig-embed-tool-complete" file="embed-tool-complete.png" title="The embedded toolbox complete with icons"/>

<p>One of the things that is worth noting here is the very limited &ndash; not to mention variable &ndash; space available for the icons in the toolbox. Care needs to be taken when designing the contents, to ensure that it can handle different screen modes and sizes of scroll bar whilst remaining clear and intuitive to the user. This is a problem that is getting worse as screen sizes reduce, and it may be that in a modern application, embedded toolboxes are best limited to the kinds of uses seen in Paint (<reference id="fig-nest-wimp-paint" />) and NetSurf (<reference id="fig-move-furniture-netsurf" />).</p>

<p>The full application with the code to position the icons can be found in <reference id="dl-embed-tool-complete"/>.</p>

<download id="dl-embed-tool-complete" file="Embedded2" title="An embedded toolbox with icons." compatibility="armv7"/>
</section>

<section>
<title>Changes of mode</title>

<p>Although our new toolbox appears to be working nicely, there is one gotcha waiting to bite. The layout of the child window relative to its parent depends on the size of a pixel in the current screen mode at the time when the window was opened, so what happens if the mode is changed whilst the window is on screen?</p>

<p>The answer, of course, is that things may end up going out of alignment. <reference id="fig-embed-tool-mode-change"/> shows the window after a change in mode: in this case from &ldquo;Big Mode&rdquo; (a mode where the X and Y eigenfactors are both zero) to a mode with more conventional settings (with eigenfactors of one). The icons are no longer spaced neatly and, worse, the toolbox window is no longer aligned with the main window furniture.</p>

<image id="fig-embed-tool-mode-change" file="embed-tool-mode-change.png" title="The carefully-aligned windows may not survive a mode change"/>

<p>Fortunately the solution is simple: if a mode change occurs whilst our window is open, we should calculate all of the positioning again and then re-open it. Recalculating the position is fairly straight forward, as we can re-use the positioning code in <function>PROCarrange_toolbox()</function> to do the hard work. We start out by setting up the pointers in <variable>main%</variable>, <variable>toolbox%</variable> and <variable>main_outline%</variable>, before calling <swi>Wimp_GetWindowInfo</swi> for the main window. We have separated this out from <function>PROCarrange_toolbox()</function> because we must check that the window is actually open before doing any re-arranging &ndash; this can be done by testing the window flags in the usual way.</p>

<p>We don&rsquo;t call <swi>Wimp_OpenWindow</swi> for the main window, as it should already have been positioned in a suitable place for the new mode by the Wimp. Instead, we call <function>PROCarrange_toolbox()</function> to calculate the toolbox position, then call <swi>Wimp_OpenWindow</swi> to apply it. In contrast to the code in <function>PROCopen_main_window</function>, we do <em>not</em> adjust the position of the toolbox in the window stack and so it should remain in the correct position relative to its parent.</p>

<p>Bringing all of this code together results in the procedure in <reference id="list-embed-tool-recalc"/>.</p>

<code id="list-embed-tool-recalc" lang="bbcbasic" title="Recalculating the toolbox on a mode change">DEF PROCrecalculate_toolbox
LOCAL main%, main_outline%, toolbox%

REM Set up the memory blocks.

main% = q%
toolbox% = q% + 100
main_outline% = q% + 200

REM Get the main window details.

!main% = MainWindow%
SYS &quot;Wimp_GetWindowInfo&quot;,,main% OR %1

REM If the main window isn't open, do nothing.

IF (main%!32 AND &amp;10000) = 0 THEN ENDPROC

REM Reposition the toolbox.

PROCarrange_toolbox(main%, main_outline%, toolbox%)

REM Reopen the toolbox pane nested into the main window.

SYS &quot;Wimp_OpenWindow&quot;,,toolbox%, &amp;4B534154, !main%, &amp;05550000
ENDPROC</code>

<p>In order to be able to call <function>PROCrecalculate_toolbox</function> whenever the mode changes, we will need to listen out for the <name>Message_ModeChange</name> User Message, which has the code &amp;400C1. The Wimp sends this around all interested applications once a mode change has completed, and it will give us the cue that we require.</p>

<p>In order to be sent <name>Message_ModeChange</name>, we will need to update <function>PROCinitialise</function> so that our call to <swi>Wimp_Initialise</swi> includes a request to receive it. Up to now, we have passed zero in <name>R3</name>, which indicates that we only wish to receive the obligatory <name>Message_Quit</name>. To add <name>Message_ModeChange</name> to the messages that the Wimp will send us, we need to create a list of the message numbers that interest us in memory, then pass a pointer to that in <name>R3</name> instead. The list is zero-terminated, which happens to also correspond to <name>Message_Quit</name>.</p>

<code lang="bbcbasic">
q%!0 = &amp;400C1 : REM Message_ModeChange
q%!4 = 0      : REM Message_Quit &amp; End of List

SYS "Wimp_Initialise", 380, &amp;4B534154, TaskName$, q%</code>

<p>To allow us to handle the new message, we will update the <keyword>CASE</keyword> which dispatches our <swi>Wimp_Poll</swi> events. Instead of simply setting the <variable>Quit%</variable> variable to <name>TRUE</name> when <name>Message_Quit</name> is received, we will instead call a new procedure called <function>PROCuser_message()</function> which can then the different codes which are received.</p>

<code lang="bbcbasic">CASE reason% OF
  WHEN 2      : SYS "Wimp_OpenWindow",,b%
  WHEN 3      : SYS "Wimp_CloseWindow",,b%
  WHEN 6      : PROCmouse_click(b%)
  WHEN 9      : PROCmenu_selection(b%)
  WHEN 17, 18 : PROCuser_message(b%)
ENDCASE</code>

<p><function>PROCuser_message()</function> itself is fairly simple. It contains a <keyword>CASE</keyword> structure to test the reason code of the incoming message, and call appropriate code in each case. A <name>Message_Quit</name> still sets the <variable>Quit%</variable> variable to <name>TRUE</name>, while <name>Message_ModeChange</name> will in turn call the new <function>PROCrecalculate_toolbox</function> procedure.</p>

<code id="list-embed-user-message" lang="bbcbasic" title="Handling user messages">DEF PROCuser_message(b%)
CASE b%!16 OF
WHEN 0      : REM Message_Quit
  Quit% = TRUE
WHEN &amp;400C1 : REM Message_ModeChange
  PROCrecalculate_toolbox
ENDCASE
ENDPROC</code>

<p>With all of these changes in place, the full application can be found in <reference id="dl-embed-tool-modes"/>.</p>

<download id="dl-embed-tool-modes" file="Embedded3" title="Updating the toolbox over mode changes" compatibility="armv7"/>
</section>
</chapter>
</manual>
