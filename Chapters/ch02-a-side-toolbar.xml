<?xml version='1.0' encoding='UTF-8' standalone='no'?>

<!DOCTYPE xmlmanual SYSTEM "../panes.dtd">

<!-- Copyright 2021, Stephen Fryatt (info@stevefryatt.org.uk)
   -
   - This file is part of Pane Tutorial:
   -
   -   http://www.stevefryatt.org.uk/software/
   -
   - Licensed under the EUPL, Version 1.2 only (the "Licence");
   - You may not use this work except in compliance with the
   - Licence.
   -
   - You may obtain a copy of the Licence at:
   -
   -   http://joinup.ec.europa.eu/software/page/eupl
   -
   - Unless required by applicable law or agreed to in
   - writing, software distributed under the Licence is
   - distributed on an "AS IS" basis, WITHOUT WARRANTIES
   - OR CONDITIONS OF ANY KIND, either express or implied.
   -
   - See the Licence for the specific language governing
   - permissions and limitations under the Licence.
  -->

<manual xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="xmldoc.xsd" version="1.8.6">

<!-- Chapter 2
   -
   - A Side Toolbar
  -->

<chapter id="chap-side-bar">
<resources>
<images>Chapter02</images>
<downloads>Chapter02</downloads>
</resources>
<filename>a-side-toolbar.php</filename>
<uri>a-side-toolbar</uri>
<title>A Side Toolbar</title>

<summary>Everyone knows what the toolbox in <cite>Draw</cite> looks like, so let&rsquo;s make one of our own.</summary>

<section>
<p>If one were to survey members of the RISC&nbsp;OS community to find out what a &ldquo;toolbox&rdquo; looked like, the answer which came back would probably be along the lines of &ldquo;like the one in <cite>Draw</cite>&rdquo;. <cite>Draw</cite>&rsquo;s toolbox has been present as standard on all systems since the days of RISC&nbsp;OS&nbsp;2, and is still functional to this day. It&rsquo;s also one of the easiest panes to implement, so let&rsquo;s start by making one of our own.</p>

<image id="fig-side-bar-draw" file="side-bar-draw.png" title="Draw&rsquo;s toolbar has become someting of a design classic" />
</section>

<section>
<title>Making our first pane</title>

<p>The first thing that we need to do is design the pane itself. As far as the Wimp is concerned, panes are just normal windows, so we&rsquo;ll go back to our template editor of choice (here I&rsquo;m using <cite>WinEd</cite>) and add a new window called &ldquo;Toolbox&rdquo;. We can see that window in the browser in <reference id="fig-side-bar-browser"/>, although the screenshot shows it after editing is complete &ndash; <cite>WinEd</cite> (and probably most other template editors) will give it a full set of scroll bars by default.</p>

<image id="fig-side-bar-browser" file="side-bar-browser.png" title="The updated templates file, with the new toolbox pane" />

<p>Opening the window template up for editing, we can change the window title to something short like &ldquo;TB&rdquo; &ndash; although this doesn&rsquo;t really matter, since the title will never be shown to the user. To make it look like a toolbox, we&rsquo;ve also added four action buttons which are each 92 &times; 92 OS&nbsp;Units and offset by 4 OS&nbsp;Units from each edge of the window: the visible area is the adjusted to be 100 &times; 388 OS&nbsp;Units. The end result can be seen in <reference id="fig-side-bar-template"/>; the buttons are just for show, as we won&rsquo;t be using them for anything in this demonstration.</p>

<image id="fig-side-bar-template" file="side-bar-template.png" title="Editing the toolbox pane in WinEd"/>

<p>Next, we must adjust the window&rsquo;s flags and parameters to meet the requirements of a toolbox pane, as seen in <reference id="fig-side-bar-flags"/>. This is the <window>Edit window</window> dialogue in <cite>WinEd</cite>; other template editors will have a close equivalent.</p>

<p>The first action is to turn off <em>all</em> of the window furniture &ndash; including the title bar. The pane won&rsquo;t be able to move independently of the window that it&rsquo;s attached to, so there&rsquo;s no need to give the user the option of trying! Under the heading of <icon>Window behaviour</icon>, the <icon>Moveable</icon> flag is also unset &ndash; this corresponds to the &lsquo;window is moveable&rsquo; flag in bit 1 of the window flags, and indicates that the <em>user</em> can&rsquo;t initiate window movement &ndash; the <em>application</em> still can, though.</p>

<image id="fig-side-bar-flags" file="side-bar-flags.png" title="Editing the pane&rsquo;s window flags in WinEd"/>

<p>The other flag which we have set is <icon>Pane</icon>, which corresponds to the &lsquo;window is a pane&rsquo; flag at bit 5 of the window flags. The <cite>Programmer&rsquo;s Reference Manual</cite> is a little vague about what this flag does, but most developers will probably have discovered that what it <em>doesn&rsquo;t</em> do is cause the window follow its parent around the screen automatically! In fact it does a few important things, which we&rsquo;ll discuss later in this chapter.</p>

<p>Down at the bottom of the dialogue, all of the scroll events are off, since we don&rsquo;t need the pane to scroll. In addition, all of the window colours have been left at their default, <cite>Style Guide</cite> compliant values.</p>

<p>With the toolbox window design added to the templates and the file saved back into our application, we can add a couple of lines to <function>PROCinitialise</function> to load it and create a window for us to work with, as shown in <reference id="list-side-bar-load-template"/>.</p>

<code id="list-side-bar-load-template" lang="bbcbasic" title="Loading the toolbox template">PROCtemplate_load(&quot;ToolBox&quot;, b%, buffer_size%, -1)
SYS &quot;Wimp_CreateWindow&quot;,,b% TO ToolBoxWindow%</code>

<p>This follows the same pattern as used for the other two templates: creating the window, and placing the resulting handle into the <variable>ToolBoxWindow%</variable> variable for future reference.</p>
</section>


<section>
<title>Handling pane events</title>

<p>Handling panes is actually fairly straight-forward: it&rsquo;s just the details which can seem confusing! It boils down to this: if the Wimp won&rsquo;t do the work for us, we need to track movement of the main window and ensure that every time it moves, we also move the pane into the correct relative position. Fortunately, there are only two ways that a window can move: if we do it ourselves, or if it is done by something outside our application (such as the user, or another application). In the latter case, the request will arrive through the <name>Open_Window_Request</name> event; in the former, we&rsquo;ll know about it.</p>

<p>In our existing application, we have the following two lines in <function>PROCpoll</function>, to handle the <name>Open_Window_Request</name> and <name>Close_Window_Request</name> events:</p>

<code lang="bbcbasic">WHEN 2      : SYS &quot;Wimp_OpenWindow&quot;,,b%
WHEN 3      : SYS &quot;Wimp_CloseWindow&quot;,,b%</code>

<p>These just pass the requests straight back to the Wimp to handle, which is all that&rsquo;s necessary for a simple application. If we want to adjust the position of the toolbox pane whenever the main window moves, however, then we will need to do a bit more work. To keep <function>PROCpoll</function> tidy, we will define two new event handling procedures &ndash; <function>PROCopen_window_request()</function> and <function>PROCclose_window_request()</function> &ndash; and use these to replace the calls to <swi>Wimp_OpenWindow</swi> and <swi>Wimp_CloseWindow</swi>, as seen in <reference id="list-side-bar-poll"/>.</p>

<code id="list-side-bar-poll" lang="bbcbasic" title="Handling events for the toolbox pane">DEF PROCpoll
LOCAL reason%

SYS "Wimp_Poll", &amp;3C01, b% TO reason%

CASE reason% OF
  WHEN 2      : PROCopen_window_request(b%)
  WHEN 3      : PROCclose_window_request(b%)
  WHEN 6      : PROCmouse_click(b%)
  WHEN 9      : PROCmenu_selection(b%)
  WHEN 17, 18 : IF b%!16 = 0 THEN Quit% = TRUE
ENDCASE
ENDPROC</code>

<p>Before either of these two new procedures will do anything, they will check the handle of the window to which the event applies. If it&rsquo;s the handle of the main window, then they will need to do the work required to handle the pane as well; for any other window, they can simply call the appropriate Wimp SWI as before.</p>

<p>In the case of <function>PROCopen_window_request()</function>, we will change the code so that any <name>Open_Window_Request</name> events relating to the main window are passed on again to another new procedure: <function>PROChandle_pane_windows()</function>. Events for other windows will simply be passed on to the <swi>Wimp_OpenWindow</swi> SWI. This code to do this can be seen in <reference id="list-side-bar-poll-open"/>; We&rsquo;ll worry about what <function>PROChandle_pane_windows()</function> looks like later on.</p>

<code id="list-side-bar-poll-open" lang="bbcbasic" title="Dealing with Open Window Request events">DEF PROCopen_window_request(b%)
IF !b% = MainWindow% THEN
  PROChandle_pane_windows(b%)
ELSE
  SYS &quot;Wimp_OpenWindow&quot;,,b%
ENDIF
ENDPROC</code>

<p>Of course, if the main window and its toolbox should be acting as one, then in addition to moving when the main window moves, the pane should be closed when the main window closes. We can look after this in a very similar way with our new <function>PROCclose_window_request()</function>, seen in <reference id="list-side-bar-poll-close"/>. If the window being closed is the main window, then the toolbox window will be closed first; either way, the window referenced by the event is closed afterwards.</p>

<code id="list-side-bar-poll-close" lang="bbcbasic" title="Dealing with Close Window Request events">DEF PROCclose_window_request(b%)
IF !b% = MainWindow% THEN
  !q% = ToolBoxWindow%
  SYS &quot;Wimp_CloseWindow&quot;,,q%
ENDIF

SYS &quot;Wimp_CloseWindow&quot;,,b%
ENDPROC</code>

<p>These changes deal with things outside of our application moving the main window, but what about us doing it ourselves? Fortunately, there&rsquo;s only one place where we do, which is at the end of <function>PROCopen_main_window</function>:</p>

<code lang="bbcbasic">REM Open the window at the top of the window stack.

q%!28 = -1 : REM Open window at top of stack
SYS &quot;Wimp_OpenWindow&quot;,,q%</code>

<p>Fortunately, this is just another call to <swi>Wimp_OpenWindow</swi>, so we should just be able to replace it with a call to <function>PROChandle_pane_windows()</function> in the same was as we did in the <name>Open_Window_Request</name> event handler. This means that our new <function>PROCopen_main_window()</function> will look as seen in <reference id="list-side-bar-open"/>.</p>

<code id="list-side-bar-open" lang="bbcbasic" title="Opening the main window and its toolbox pane">DEF PROCopen_main_window
LOCAL screen_width%, screen_height%, window_size%

REM Get the window details.

!q% = MainWindow%
SYS &quot;Wimp_GetWindowState&quot;,,q%

REM If the window isn't open, resize and centre it on the screen.

IF (q%!32 AND &amp;10000) = 0 THEN
  window_size% = WindowSize%

  REM Read the screen dimensions.

  screen_width% = FNread_mode_dimension(11, 4)
  screen_height% = FNread_mode_dimension(12, 5)

  REM Ensure that the window fills no more than 75% of either dimension.

  IF window_size% &gt; (screen_width% * 0.75) THEN window_size% = screen_width% * 0.75
  IF window_size% &gt; (screen_height% * 0.75) THEN window_size% = screen_height% * 0.75

  REM Update the window dimensions.

  q%!4 = (screen_width% - window_size%) / 2   : REM Visible Area Minimum X
  q%!8 = (screen_height% - window_size%) / 2  : REM Visible Area Minimum Y

  q%!12 = q%!4 + window_size%                 : REM Visible Area Maximum X
  q%!16 = q%!8 + window_size%                 : REM Visible Area Maximum Y
ENDIF

REM Open the window at the top of the window stack.

q%!28 = -1 : REM Open window at top of stack
PROChandle_pane_windows(q%)
ENDPROC</code>

<p>Aside from working out what goes into the <function>PROChandle_pane_windows()</function> procedure, that&rsquo;s all of the code that we will need in order to handle our new toolbox.</p>
</section>


<section>
<title>Setting the visible area</title>

<p>Now that we have ensured that our <function>PROChandle_pane_windows()</function> procedure will be called every time the positions of the main window and toolbox pane need to be updated, all that remains is to work out how to join the two windows together on screen.</p>

<p>The procedure takes a single parameter, <variable>main%</variable>, which is a pointer to the <swi>Wimp_WindowState</swi> block for the main window. Whether this arrived through <swi>Wimp_Poll</swi> into the block pointed to by <variable>b%</variable>, or was put into the block pointed to by <variable>q%</variable> using <swi>Wimp_WindowState</swi> in <function>PROCopen_main_window</function>, it contains details of where the main window is required to be opened.</p>

<p>The first thing that we need to do is to create an equivalent window state block for the toolbox pane, which we can then update with the necessary values calculated from the main window&rsquo;s position. Unfortunately we can&rsquo;t use our usual scratch block of memory pointed to by <variable>q%</variable>, because that could already be holding the data for the main window if we have been called from <function>PROCopen_main_window</function>. However, we know that only 36 bytes will be in use from what is at least a 256 byte block, so we can just load the pane information in at an offset of 64 bytes.</p>

<code lang="bbcbasic">pane% = main% + 64

!pane% = ToolBoxWindow%
SYS &quot;Wimp_GetWindowState&quot;,,pane%</code>

<p>Since the pane can&rsquo;t be resized by the user, we can be fairly confident that its width and height will still be as they were saved in the templates file. These can be used to give us the values for the pane&rsquo;s width and height, saving us from having to use constants in the code. Before making any changes to the pane window state block&rsquo;s contents, we therefore calculate the width and height of the pane&rsquo;s visible area and store the two values for future use.</p>

<code lang="bbcbasic">width% = pane%!12 - pane%!4   : REM Visible Area Maximum X - Minimum X
height% = pane%!16 - pane%!8  : REM Visible Area Maximum Y - Minimum Y</code>

<p>As already noted, we know where the main window should be on screen. We also know the relationship that we want to have between the main window and its pane, as shown in <reference id="fig-side-bar-pos-plane"/>. We can therefore move the pane so that it is in the correct position relative to the main window, update the main window&rsquo;s position if necessary, then call <swi>Wimp_OpenWindow</swi> for both windows in turn.</p>

<image id="fig-side-bar-pos-plane" file="side-bar-pos-plane.png" title="The relationship between the main window and its toolbar" />

<p><reference id="fig-side-bar-pos-plane"/> shows the relationship between the main window and its pane. The tops of the two windows (<maths>y1</maths> for the two visible areas) should be level, so we can copy the <maths>y1</maths> value from the main window to the pane. The bottom of the pane (its <maths>y0</maths>) is the height of the pane below the top of the main window.</p>

<code lang="bbcbasic">pane%!16 = main%!16           : REM Visible Area Maximum Y
pane%!8 = main%!16 - height%  : REM Visible Area Minimum Y</code>

<p>In a similar way, the right-hand side of the pane (its <maths>x1</maths>) is on the left-hand side of the main window, while its left-hand side is the width of the pane further to the left.</p>

<code lang="bbcbasic">pane%!12 = main%!4            : REM Visible Area Maximum X
pane%!4 = main%!4 - width%    : REM Visible Area Minimum X</code>
</section>

<section>
<title>Lost in the stack</title>

<p>The code above deals with the position of the pane in the <maths>X</maths> and <maths>Y</maths> dimensions, but what about the <maths>Z</maths> dimension &ndash; its position in the window stack? The Wimp requires that panes appear directly above their parent window; however, this is still left up to the application to manage.</p>

<p>There's a very practical reason for this requirement. If something like a toolbar pane goes behind its parent window in the stack, then it will very likely be obscured by its parent. Even if the pane is in front, if it isn&rsquo;t <em>immediately</em> in front, then it&rsquo;s possible for other windows to get in between as seen in <reference id="fig-side-bar-loose"/> (the application was deliberately broken in order to allow this to occur).</p>

<image id="fig-side-bar-loose" file="side-bar-loose.png" title="If we&rsquo;re not careful, other windows can get in the way" />

<p>There are a couple of more technical reasons, too, which relate to the behaviour of the &lsquo;window is a pane&rsquo; flag. When checking to see if our main window is at the top of the window stack, or obscured by any other windows (for the &lsquo;window is fully visible&rsquo; flag at bit 17 of the window flags), the Wimp will ignore any windows immediately in front of it so long as they have their pane flags set. Without use of the pane flag, a window whose pane obscures any part of its work area can never be reported as being fully visible by the Wimp.</p>

<p>In a similar way, if a window with its pane flag set gains the caret, then the Wimp will give input focus to (and set the &lsquo;window has input focus&rsquo; flag at bit 20 of the window flags for) the first window <em>below</em> it in the stack which is not a pane. Finally, when working out which bits of a window might need redrawing following a re-size, the Wimp will treat any panes immediately above it as being transparent &ndash; on the basis that the application may be about to move them anyway.</p>

<p>Keeping the <maths>Z</maths> order of the windows correct is fairly straight-forward. The <name>Open_Window_Request</name> block for the main window contains the position in the window stack at which it should be opened, in terms of the handle of the window below which it should be opened at offset 28. Since the toolbox pane should be in front of the window, we copy this value into the pane&rsquo;s block so that the pane appears at the correct position in the stack.</p>

<code lang="bbcbasic">IF main%!28 &lt;&gt; !pane% THEN pane%!28 = main%!28</code>

<p>There&rsquo;s one exception to this, however. If the Wimp is already asking us to open the main window behind the pane, then both the pane and the main window must already be in the correct positions in the window stack. In this case, there&rsquo;s no point attempting to open the pane behind itself, so we just leave things as they are. The pane is now ready to be opened in its new location, using a call to <swi>Wimp_OpenWindow</swi>.</p>

<code lang="bbcbasic">SYS &quot;Wimp_OpenWindow&quot;,,pane%</code>

<p>With the pane open in the correct place, all that remains to do is to open the main window. This is done using the block from the <name>Open_Window_Request</name> event almost unchanged: the only thing that we alter is the handle of the window to open behind, which we set to the handle of the pane. This ensures that the pane is <em>always</em> directly in front of the main window.</p>

<code lang="bbcbasic">main%!28 = !pane%

SYS &quot;Wimp_OpenWindow&quot;,,main%</code>

<p>Putting all of the code above together, <function>PROChandle_pane_windows()</function> will look as shown in <reference id="list-side-bar-panes"/>.</p>

<code id="list-side-bar-panes" lang="bbcbasic">DEF PROChandle_pane_windows(main%)
LOCAL pane%, width%, height%

REM Get the Window State block for the pane, using some of the spare
REM space above the data for the state of the main window.

pane% = main% + 64

!pane% = ToolBoxWindow%
SYS &quot;Wimp_GetWindowState&quot;,,pane%

REM Find the width and height of the pane's visible area.

width% = pane%!12 - pane%!4   : REM Visible Area Maximum X - Minimum X
height% = pane%!16 - pane%!8  : REM Visible Area Maximum Y - Minimum Y

REM Move the pane so that it's in the correct X and Y position
REM relative to where the main window is to go.

pane%!4 = main%!4 - width%    : REM Visible Area Minimum X
pane%!8 = main%!16 - height%  : REM Visible Area Minimum Y
pane%!12 = main%!4            : REM Visible Area Maximum X
pane%!16 = main%!16           : REM Visible Area Maximum Y

REM Unless the main window is to be opened behind the pane, meaning that the
REM pane must already be in the correct place in the stack, set the pane's
REM Open Behind so that it appears in the stack where the main window is to go.

IF main%!28 &lt;&gt; !pane% THEN pane%!28 = main%!28

SYS &quot;Wimp_OpenWindow&quot;,,pane%

REM Set the main window's Open Behind so that it opens behind the pane.

main%!28 = !pane%

SYS &quot;Wimp_OpenWindow&quot;,,main%
ENDPROC</code>

<p>Running our new application should reveal a main window similar to that shown in <reference id="fig-side-bar-complete"/>. If the main window is moved, the pane should remain securely attached at all times.</p>

<image id="fig-side-bar-complete" file="side-bar-complete.png" title="Our main window with a simple vertical toolbox attached"/>

<p>The full code can be found in <reference id="dl-side-bar-1"/>.</p>

<download id="dl-side-bar-1" file="SideBar1" title="A simple vertical toolbox pane" compatibility="armv7"/>
</section>


<section>
<title>A small improvement</title>

<p>If you&rsquo;re familiar with <cite>Draw</cite>, then there&rsquo;s one small difference which you might notice in the behaviour of the toolbox in our example application compared to the toolbox in <cite>Draw</cite>. If a <cite>Draw</cite> window is moved off the left-hand edge of the screen, then the toolbox pane stops moving when it hits the edge and begins to retract over the parent window as seen in <reference id="fig-side-bar-draw-offscreen"/>. Only when the pane is flush with the side of the main window does it begin to move off the screen again.</p>

<image id="fig-side-bar-draw-offscreen" file="side-bar-draw-offscreen.png" title="Draw&rsquo;s toolbox stays on screen as long as possible"/>

<p>Since we have complete control over the positioning of the toolbox pane, this is easy to implement in our own application. The changes needed are all in <function>PROChandle_pane_windows()</function>, where we set the coordinates of the pane&rsquo;s visible area. Above we used the following fixed calculations:</p>

<code lang="bbcbasic">REM Move the pane so that it's in the correct X and Y position
REM relative to where the main window is to go.

pane%!4 = main%!4 - width%    : REM Visible Area Minimum X
pane%!8 = main%!16 - height%  : REM Visible Area Minimum Y
pane%!12 = main%!4            : REM Visible Area Maximum X
pane%!16 = main%!16           : REM Visible Area Maximum Y</code>

<p>We can replace this by testing the minimum <maths>X</maths> coordinate of the main window&rsquo;s visible area, then applying different calculations for the pane&rsquo;s <maths>X</maths> coordinates as follows:</p>

<list>
<li>If the main window is on-screen by more than the width of the pane, then the pane is anchored by its right-hand edge as before.</li>
<li>If the main window is on-screen by less than the width of the pane, then the pane is positioned up against the left-hand side of the screen and does not reference its horizontal position to the main window at all.</li>
<li>If the main window is off off-screen, then the pane is anchored by its left-hand edge.</li>
</list>

<p>The code to implement this can be seen in <reference id="list-side-bar-slide"/>.</p>

<code id="list-side-bar-slide" lang="bbcbasic" title="Calculating the horizontal position of the pane more flexibly">REM Move the pane so that it's in the correct X and Y position
REM relative to where the main window is to go.

CASE TRUE OF
WHEN main%!4 &gt; width%
  pane%!4 = main%!4 - width%  : REM Visible Area Minimum X
  pane%!12 = main%!4          : REM Visible Area Maximum X
WHEN main%!4 &gt; 0
  pane%!4 = 0                 : REM Visible Area Minimum X
  pane%!12 = width%           : REM Visible Area Maximum X
OTHERWISE
  pane%!4 = main%!4           : REM Visible Area Minimum X
  pane%!12 = main%!4 + width% : REM Visible Area Maximum X
ENDCASE

pane%!8 = main%!16 - height%  : REM Visible Area Minimum Y
pane%!16 = main%!16           : REM Visible Area Maximum Y</code>

<p>With this in place, our own pane begins to behave in a more <cite>Draw</cite>-like way when it reaches the edge of the screen, as seen in <reference id="fig-side-bar-offscreen"/>.</p>

<image id="fig-side-bar-offscreen" file="side-bar-offscreen.png" title="Our own toolbox can now behave more dynamically, too"/>

<p>The full code can be found in <reference id="dl-side-bar-2"/>.</p>

<download id="dl-side-bar-2" file="SideBar2" title="A more dynamic vertical toolbox pane" compatibility="armv7"/>
</section>
</chapter>
</manual>

